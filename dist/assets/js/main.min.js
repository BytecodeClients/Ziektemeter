"use strict";$(document).ready(function(){setInterval(function(){$(".increaseOverTime").each(function(){var e=Number($(this).text().replace(/\./g,""))+Math.floor(1e3*Math.random()),t=(new Intl.NumberFormat).format(e);$(this).text(t)})},1e3);var e=document.getElementById("piechart").getContext("2d"),t=(new Chart(e,{type:"pie",data:{datasets:[{data:[10,20,30]}],labels:["Red","Green","Orange"]},options:{responsive:!0,legend:{display:!1,position:"right"}}}),document.getElementById("linechart1").getContext("2d")),a=(new Chart(t,{type:"line",data:{labels:[1940,1950,1960,1970,1980,1990,2e3,2010,2020],datasets:[{data:[70,75,76,77,79,81,82,83,85],label:"rood",borderColor:"#3e95cd",fill:!1},{data:[70,72,73,75,75,77,82,83,85],label:"blauw",borderColor:"#8e5ea2",fill:!1},{data:[50,72,73,75,75,77,82,83,85],label:"blauw",borderColor:"#8e5ea2",showLine:!1}]},options:{responsive:!0,legend:{display:!1,position:"right"}}}),document.getElementById("linechart2").getContext("2d"));new Chart(a,{type:"line",data:{labels:[1940,1950,1960,1970,1980,1990,2e3,2010,2020],datasets:[{data:[70,75,76,77,79,81,82,83,85],label:"rood",borderColor:"#3e95cd",fill:!1},{data:[70,72,73,75,75,77,82,83,85],label:"blauw",borderColor:"#8e5ea2",fill:!1},{data:[50,72,73,75,75,77,82,83,85],label:"blauw",borderColor:"#8e5ea2",showLine:!1}]},options:{responsive:!0,legend:{display:!1,position:"right"}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJzZXRJbnRlcnZhbCIsImVhY2giLCJuZXdWYWx1ZSIsIk51bWJlciIsInRoaXMiLCJ0ZXh0IiwicmVwbGFjZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm5ld1ZhbHVlRm9ybWF0dGVkIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsImN0eDAiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJjdHgxIiwiQ2hhcnQiLCJ0eXBlIiwiZGF0YSIsImRhdGFzZXRzIiwibGFiZWxzIiwib3B0aW9ucyIsInJlc3BvbnNpdmUiLCJsZWdlbmQiLCJkaXNwbGF5IiwicG9zaXRpb24iLCJjdHgyIiwibGFiZWwiLCJib3JkZXJDb2xvciIsImZpbGwiLCJzaG93TGluZSJdLCJtYXBwaW5ncyI6ImFBQUFBLEVBQUVDLFVBQVVDLE1BQU0sV0FZaEJDLFlBVnVCLFdBQ3JCSCxFQUFFLHFCQUFxQkksS0FBSyxXQUMxQixJQUVNQyxFQUZlQyxPQUFPTixFQUFFTyxNQUFNQyxPQUFPQyxRQUFRLE1BQU8sS0FDOUJDLEtBQUtDLE1BQXNCLElBQWhCRCxLQUFLRSxVQUV0Q0MsR0FBb0IsSUFBSUMsS0FBS0MsY0FBZUMsT0FBT1gsR0FDekRMLEVBQUVPLE1BQU1DLEtBQUtLLE1BSVcsS0FFNUIsSUFBTUksRUFBT2hCLFNBQVNpQixlQUFlLFlBQVlDLFdBQVcsTUEwQnREQyxHQXhCYSxJQUFJQyxNQUFNSixHQUMzQkssS0FBTSxNQUNOQyxNQUNFQyxXQUNFRCxNQUFPLEdBQUksR0FBSSxNQUlqQkUsUUFDRSxNQUNBLFFBQ0EsV0FHSkMsU0FDRUMsWUFBWSxFQUNaQyxRQUNFQyxTQUFTLEVBQ1RDLFNBQVUsWUFNSDdCLFNBQVNpQixlQUFlLGNBQWNDLFdBQVcsT0FpQ3hEWSxHQWhDYSxJQUFJVixNQUFNRCxHQUMzQkUsS0FBTSxPQUNOQyxNQUNFRSxRQUFTLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUssS0FBSyxNQUNqREQsV0FDSUQsTUFBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFDL0JTLE1BQU8sT0FDUEMsWUFBYSxVQUNiQyxNQUFNLElBRU5YLE1BQU8sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQy9CUyxNQUFPLFFBQ1BDLFlBQWEsVUFDYkMsTUFBTSxJQUVOWCxNQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUMvQlMsTUFBTyxRQUNQQyxZQUFhLFVBQ2JFLFVBQVUsS0FJaEJULFNBQ0VDLFlBQVksRUFDWkMsUUFDRUMsU0FBUyxFQUNUQyxTQUFVLFlBTUg3QixTQUFTaUIsZUFBZSxjQUFjQyxXQUFXLE9BQzNDLElBQUlFLE1BQU1VLEdBQzNCVCxLQUFNLE9BQ05DLE1BQ0VFLFFBQVMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSyxLQUFLLE1BQ2pERCxXQUNJRCxNQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUMvQlMsTUFBTyxPQUNQQyxZQUFhLFVBQ2JDLE1BQU0sSUFFTlgsTUFBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFDL0JTLE1BQU8sUUFDUEMsWUFBYSxVQUNiQyxNQUFNLElBRU5YLE1BQU8sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQy9CUyxNQUFPLFFBQ1BDLFlBQWEsVUFDYkUsVUFBVSxLQUloQlQsU0FDRUMsWUFBWSxFQUNaQyxRQUNFQyxTQUFTLEVBQ1RDLFNBQVUiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblxyXG4gIGNvbnN0IGluY3JlYXNlVmFsdWVzID0gKCkgPT4ge1xyXG4gICAgJCgnLmluY3JlYXNlT3ZlclRpbWUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gTnVtYmVyKCQodGhpcykudGV4dCgpLnJlcGxhY2UoL1xcLi9nLCAnJykpO1xyXG4gICAgICBjb25zdCBpbmNyZWFzZVBlckludGVydmFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCk7IC8vIFRPRE86IEFkZCBhIGRhdGEgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBnaXZlIHRoZSBpbmNyZWFzZSBwZXIgaW50ZXJ2YWxcclxuICAgICAgY29uc3QgbmV3VmFsdWUgPSBjdXJyZW50VmFsdWUgKyBpbmNyZWFzZVBlckludGVydmFsO1xyXG4gICAgICBjb25zdCBuZXdWYWx1ZUZvcm1hdHRlZCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgpLmZvcm1hdChuZXdWYWx1ZSk7XHJcbiAgICAgICQodGhpcykudGV4dChuZXdWYWx1ZUZvcm1hdHRlZCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBzZXRJbnRlcnZhbChpbmNyZWFzZVZhbHVlcywgMTAwMCk7XHJcblxyXG4gIGNvbnN0IGN0eDAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpZWNoYXJ0XCIpLmdldENvbnRleHQoJzJkJyk7XHJcbiAgLy8gQmlnIFBpZSBDaGFydFxyXG4gIGNvbnN0IG15UGllQ2hhcnQgPSBuZXcgQ2hhcnQoY3R4MCwge1xyXG4gICAgdHlwZTogJ3BpZScsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGRhdGFzZXRzOiBbe1xyXG4gICAgICAgIGRhdGE6IFsxMCwgMjAsIDMwXSxcclxuICAgICAgfV0sXHJcblxyXG4gICAgICAvLyBUaGVzZSBsYWJlbHMgYXBwZWFyIGluIHRoZSBsZWdlbmQgYW5kIGluIHRoZSB0b29sdGlwcyB3aGVuIGhvdmVyaW5nIGRpZmZlcmVudCBhcmNzXHJcbiAgICAgIGxhYmVsczogW1xyXG4gICAgICAgICdSZWQnLFxyXG4gICAgICAgICdHcmVlbicsXHJcbiAgICAgICAgJ09yYW5nZSdcclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgZGlzcGxheTogZmFsc2UsXHJcbiAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy9MaW5lIENoYXJ0IDFcclxuICBjb25zdCBjdHgxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lY2hhcnQxXCIpLmdldENvbnRleHQoJzJkJyk7XHJcbiAgY29uc3QgbGluZUNoYXJ0MSA9IG5ldyBDaGFydChjdHgxLCB7XHJcbiAgICB0eXBlOiAnbGluZScsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGxhYmVsczogWzE5NDAsMTk1MCwxOTYwLDE5NzAsMTk4MCwxOTkwLDIwMDAsMjAxMCwyMDIwXSxcclxuICAgICAgZGF0YXNldHM6IFt7IFxyXG4gICAgICAgICAgZGF0YTogWzcwLDc1LDc2LDc3LDc5LDgxLDgyLDgzLDg1XSxcclxuICAgICAgICAgIGxhYmVsOiBcInJvb2RcIixcclxuICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiMzZTk1Y2RcIixcclxuICAgICAgICAgIGZpbGw6IGZhbHNlXHJcbiAgICAgICAgfSwgeyBcclxuICAgICAgICAgIGRhdGE6IFs3MCw3Miw3Myw3NSw3NSw3Nyw4Miw4Myw4NV0sXHJcbiAgICAgICAgICBsYWJlbDogXCJibGF1d1wiLFxyXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IFwiIzhlNWVhMlwiLFxyXG4gICAgICAgICAgZmlsbDogZmFsc2VcclxuICAgICAgICB9LCB7IFxyXG4gICAgICAgICAgZGF0YTogWzUwLDcyLDczLDc1LDc1LDc3LDgyLDgzLDg1XSxcclxuICAgICAgICAgIGxhYmVsOiBcImJsYXV3XCIsXHJcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCIjOGU1ZWEyXCIsXHJcbiAgICAgICAgICBzaG93TGluZTogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICBvcHRpb25zOiB7XHJcbiAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxyXG4gICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vTGluZSBDaGFydCAyXHJcbiAgY29uc3QgY3R4MiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZWNoYXJ0MlwiKS5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIGNvbnN0IGxpbmVDaGFydDIgPSBuZXcgQ2hhcnQoY3R4Miwge1xyXG4gICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICBsYWJlbHM6IFsxOTQwLDE5NTAsMTk2MCwxOTcwLDE5ODAsMTk5MCwyMDAwLDIwMTAsMjAyMF0sXHJcbiAgICAgIGRhdGFzZXRzOiBbeyBcclxuICAgICAgICAgIGRhdGE6IFs3MCw3NSw3Niw3Nyw3OSw4MSw4Miw4Myw4NV0sXHJcbiAgICAgICAgICBsYWJlbDogXCJyb29kXCIsXHJcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCIjM2U5NWNkXCIsXHJcbiAgICAgICAgICBmaWxsOiBmYWxzZVxyXG4gICAgICAgIH0sIHsgXHJcbiAgICAgICAgICBkYXRhOiBbNzAsNzIsNzMsNzUsNzUsNzcsODIsODMsODVdLFxyXG4gICAgICAgICAgbGFiZWw6IFwiYmxhdXdcIixcclxuICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiM4ZTVlYTJcIixcclxuICAgICAgICAgIGZpbGw6IGZhbHNlXHJcbiAgICAgICAgfSwgeyBcclxuICAgICAgICAgIGRhdGE6IFs1MCw3Miw3Myw3NSw3NSw3Nyw4Miw4Myw4NV0sXHJcbiAgICAgICAgICBsYWJlbDogXCJibGF1d1wiLFxyXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IFwiIzhlNWVhMlwiLFxyXG4gICAgICAgICAgc2hvd0xpbmU6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICByZXNwb25zaXZlOiB0cnVlLFxyXG4gICAgICBsZWdlbmQ6IHtcclxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcclxuICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0JyxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KSJdfQ==
